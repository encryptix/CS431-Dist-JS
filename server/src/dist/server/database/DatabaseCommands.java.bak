package wsn.server.database;

import wsn.server.Logger;
import wsn.server.controller.BoardTypesXml;
import wsn.server.controller.ControllerData;
import wsn.server.controller.ControllerXml;
import wsn.server.fileManagement.FileDownloadData;
import wsn.server.fileManagement.FileShowData;
import wsn.server.loginManagement.LoginStates;
import wsn.server.userManagement.UserShowData;

import java.io.InputStream;
import java.sql.Blob;
import java.sql.ResultSet;
import java.sql.SQLException;

public class DatabaseCommands {
	private Database _theBase = null;
	
	public DatabaseCommands(){
		_theBase = new Database();
	}
	
	//********* Login Management **********
	public LoginStates updateSession(String username, String sessionID){
		String[] inputs = new String[2];
		inputs[0]=sessionID;
		inputs[1]=username;
		
		String statement = "UPDATE USERS SET session = ? WHERE username = ?";
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - updateSession()","Exception: "+ex.getLocalizedMessage());
			return LoginStates.Error_Session_Update;
		}
		return LoginStates.Logged_In;
	}
	
	public LoginStates checkLoginDetails(String username, String password){
		String statement = "SELECT password,isVerified FROM USERS WHERE username= ?";
		String[] inputs = new String[1];
		inputs[0]=username;
		try{
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			String pass = "";
			String isVerified = "";
			//index starts at 1
			if(rs.next()){
				pass = rs.getString(1);
				isVerified = rs.getString(2);
			}
			
			if(pass.equals("") && isVerified.equals("")){
				Logger.info("Database commands checkLoginDetails", "User "+username+" doesnt exist");
				return LoginStates.Unknown_User;
			}else if(!pass.equals(password)){
				Logger.info("Database commands checkLoginDetails", "User "+username+" has wrong password");
				return LoginStates.Invalid_Pass;
			}else if(!isVerified.equals("1")){
				Logger.info("Database commands checkLoginDetails", "User "+username+" is not verified");
				return LoginStates.Not_Validated;
			}else if(isVerified.equals("1") && pass.equals(password)){
				Logger.info("Database commands checkLoginDetails", "User "+username+" logged in");
				return LoginStates.Logged_In;
			}
			
			Logger.info("Database commands checkLoginDetails", "User "+username+" NOT logged in (unknown reason)");
			return LoginStates.Login_Error;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - checkLoginDetails()","Exception: "+ex.getLocalizedMessage());
			return LoginStates.Login_Error;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - checkLoginDetails() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}
		
	//Check to see if the sessionID exists in the database
	public boolean checkUserSessionIsReal(String username, String session){
		String statement = "Select session from USERS WHERE username= ?";
		String[] inputs = new String[1];
		inputs[0] = username;
		try{
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			//starts at 1
			String ans = "";
			if(rs.next()){
				ans = rs.getString(1);
			}
			
			if(ans==null || ans.length()<1 || !ans.equals(session)){
				Logger.info("Database commands checkUserSessionIsReal", "User session verification failed "+username+" session = :"+session+ "Stored session = "+ans);
				return false;
			}
				Logger.debug("Database commands checkUserSessionIsReal", "valid session for "+username);
				return true;
			
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - checkUserSessionIsReal()","Exception: "+ex.getLocalizedMessage());
			return false;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - checkUserSessionIsReal() final","Exception: "+ex.getLocalizedMessage());	
			}
		}			
		
	}

	//********* File Management ***********	
	public boolean saveFile(String filename, String username, String notes, InputStream stream, int size){
		//(id,uploaded,modified,filename,filesize, user,notes,file);
		String statement = "INSERT INTO FILES VALUES(NULL,NULL,NULL,?, ? , ?, ?, ? )";
		String[] inputs = new String[4];
		inputs[0] = filename;
		inputs[1] = ""+size;
		inputs[2] = username;
		inputs[3] = notes;
		try{
			_theBase.executeFileInputStreamInsert(statement, inputs, stream, size);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - saveFile()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}
	
	public FileDownloadData getFile(String id){
		String statement = "SELECT FILE,filename FROM FILES WHERE ID=?";
		String[] inputs = new String[1];
		inputs[0] = id;
		try{
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			Blob file = null;
			String filename = "unknown";
			if(rs.next()){
				file = rs.getBlob(1);
				filename = rs.getString(2);
			}
			//if the file doesnt exist
			if(file == null){
				Logger.debug("DatabaseCommands - getFile()","File doesnt exist");
				return null;
			}
			
			//get all the bytes from the first to the end
			byte[] fileAsBytes = file.getBytes(1, (int)file.length());
			return new FileDownloadData(fileAsBytes,filename);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - getFile()","Exception: "+ex.getLocalizedMessage());
			return null;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - getFile() final","Exception: "+ex.getLocalizedMessage());	
			}
		}	
	}

	public String showFiles(String username, String orderBy){
		String statement = "SELECT id,uploaded,modified,notes,filename,filesize FROM FILES WHERE username = ? ORDER BY ?";
		String[] inputs = new String[2];
		inputs[0] = username;
		inputs[1] = orderBy;
		
		FileShowData fileDetails = new FileShowData();
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			while(rs.next()){
				String id = rs.getString(1);
				String uploaded = rs.getString(2);
				String modified = rs.getString(3);
				String notes = rs.getString(4);
				String filename = rs.getString(5);
				String filesize = rs.getString(6);
				fileDetails.addFile(id, uploaded, modified, username, notes,filename,filesize);
			}
			return fileDetails.getList();
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - showFiles()","Exception: "+ex.getLocalizedMessage());
			return null;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - showFiles() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}
	
	public String showAllFiles(String orderBy){
		String statement = "SELECT id,uploaded,modified,notes,username,filename,filesize FROM FILES ORDER BY ?";
		String[] inputs = new String[1];
		inputs[0] = orderBy;
		FileShowData fileDetails = new FileShowData();
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			while(rs.next()){
				String id = rs.getString(1);
				String uploaded = rs.getString(2);
				String modified = rs.getString(3);
				String notes = rs.getString(4);
				String username = rs.getString(5);
				String filename = rs.getString(6);
				String filesize = rs.getString(7);
				fileDetails.addFile(id, uploaded, modified, username, notes,filename,filesize);
			}
			return fileDetails.getList();
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - showFiles()","Exception: "+ex.getLocalizedMessage());
			return null;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - showFiles() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}

	public boolean checkOwnership(String username,String fileID){
		//check that the fileID is owned by username
		String statement = "SELECT EXISTS(SELECT id FROM FILES WHERE username=? AND id= ?)";
		
		String[] inputs = new String[2];
		inputs[0] = username;
		inputs[1] = fileID;
		try{
			//returns a 1 or 0
			String result = "0";
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			if(rs.next()){
				result = rs.getString(1);
			}
			if(result.equals("1")){
				return true;
			}
			return false;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - checkOwnership()","Exception: "+ex.getLocalizedMessage());
			return false;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - checkOwnership() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}

	public boolean updateFileNotes(String fileID,String note){
		String[] inputs = new String[2];
		inputs[0]=note;
		inputs[1]=fileID;
		
		String statement = "UPDATE FILES SET notes = ? WHERE id = ?";
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
			return true;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - updateFileNotes()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
	}
	
	public boolean deleteFile(String fileID){
		String[] inputs = new String[1];
		inputs[0] = fileID;
		
		String statement = "DELETE FROM FILES WHERE id = ?";
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
			return true;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - deleteFile()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
	}
	
	public boolean deleteFiles(String username){
		String[] inputs = new String[1];
		inputs[0] = username;
		
		String statement = "DELETE FROM FILES WHERE username = ?";
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
			return true;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - deleteFiles()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
	}

	//********* User Management ***********	
	public String showUsers() {
		String statement = "SELECT username,firstName,secondName,email,notes,isAdmin,isVerified,lastAccess,created FROM USERS";
		UserShowData userDetails = new UserShowData();
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, new String[0]);
			while(rs.next()){
				String username = rs.getString(1);
				String firstName = rs.getString(2);
				String secondName  = rs.getString(3);
				String email = rs.getString(4);
				String notes = rs.getString(5);
				String isAdmin = rs.getString(6);
				String isVerified = rs.getString(7);
				String lastAccess = rs.getString(8);
				String created = rs.getString(9);
				userDetails.addUser(username,firstName,secondName,email,notes,isAdmin,isVerified,created,lastAccess);
			}
			return userDetails.getList();
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - showUser()","Exception: "+ex.getLocalizedMessage());
			return null;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - showUser() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}
	
	public String showUser(String name) {
		String statement = "SELECT username,firstName,secondName,email,notes,isAdmin,isVerified,lastAccess,created FROM USERS WHERE username= ?";
		String[] details = new String[1];
		details[0]=name;
		UserShowData userDetails = new UserShowData();
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, details);
			if(rs.next()){
				String username = rs.getString(1);
				String firstName = rs.getString(2);
				String secondName  = rs.getString(3);
				String email = rs.getString(4);
				String notes = rs.getString(5);
				String isAdmin = rs.getString(6);
				String isVerified = rs.getString(7);
				String lastAccess = rs.getString(8);
				String created = rs.getString(9);
				userDetails.addUser(username,firstName,secondName,email,notes,isAdmin,isVerified,created,lastAccess);
				return userDetails.getList();
			}
			return null;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - showUsers()","Exception: "+ex.getLocalizedMessage());
			return null;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - showUsers() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}
	
	public boolean isUsernameTaken(String username){
		String statement = "SELECT EXISTS(SELECT username FROM USERS WHERE username=?)";
		String[] inputs = new String[1];
		inputs[0] = username;
		
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			String ans = "";
			if(rs.next()){
				ans = rs.getString(1);
			}
			Logger.debug("DatabaseCommands isUsernameTaken", "isTaken: "+ans);
			//if the answer to the number of users with that name is not 1
			if(ans.equals("1")){
				return true;
			}
			return false;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - isUsernameTaken()","Exception: "+ex.getLocalizedMessage());
			return false;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - isUsernameTaken() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}
	
	public boolean addUser(String username,String password,String firstName,String email,String secondName,String notes){
		// username, password, firstname, secondName, email, notes, isAdmin, isVerified, session,lastAccess,created
		String statement = "INSERT INTO USERS VALUES (?,?,?,?,?,?,'0','0', NULL, NULL, NULL)";
		String[] inputs = new String[6];
		inputs[0] = username;
		inputs[1] = password;
		inputs[2] = firstName;
		inputs[3] = secondName;
		inputs[4] = email;
		inputs[5] = notes;
		
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - addUser()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}

	public boolean checkUserIsAdmin(String username) {
		String statement = "SELECT isAdmin FROM USERS WHERE username= ?";
		String[] inputs = new String[1];
		inputs[0]=username;
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			String ans = "";
			if(rs.next()){
				ans = rs.getString(1);
			}
			Logger.debug("DatabaseCommands checkUserIsAdmin", "isAdmin: "+ans);
			//if the answer to the number of users with that name is not 1
			if(ans.equals("1")){
				return true;
			}
			return false;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - checkUserIsAdmin()","Exception: "+ex.getLocalizedMessage());
			return false;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - checkUserIsAdmin() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}
	
	public boolean makeAdmin(String username,boolean makeAdmin) {
		String statement = "UPDATE USERS SET isAdmin = ? WHERE username = ?";
		String[] inputs = new String[2];
		if(makeAdmin)
			inputs[0] = "1";
		else
			inputs[0] = "0";
		inputs[1] = username;
		
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - makeAdmin()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}
	
	public boolean doVerification(String username,boolean verify) {
		String statement = "UPDATE USERS SET isVerified = ? WHERE username = ?";
		String[] inputs = new String[2];
		if(verify)
			inputs[0] = "1";
		else
			inputs[0] = "0";
		inputs[1] = username;
		
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - doVerification()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}
	
	public boolean deleteUser(String username) {
		String statement = "DELETE FROM USERS WHERE username = ?";
		String[] inputs = new String[1];
		inputs[0] = username;
		
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - deleteUser()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}
	
	public boolean updateUser(String password, String firstName, String secondName, String email,String notes,int count, String username){
		//Bug with this when setting only notes:
		// [3:5:15 DEBUG @ interface updateUser] count is 1
		// [3:5:15 DEBUG @ DatabaseCommands updateUser()] the update string is : UPDATE USERS SE WHERE username = ?

		if(count<=0){
			return false;
		}
		
		//know that there is at least one update here
		int paramCounter=0;
		String statement = "UPDATE USERS SET";
		
		
		String[] inputs = new String[count+1];
		
		if(password!=null){
			statement+=" password = ? ,";
			inputs[paramCounter++] = password;
		}
		if(firstName!=null){
			statement+=" firstName = ? ,";
			inputs[paramCounter++] = firstName;
		}
		if(secondName!=null){
			statement+=" secondName = ? ,";
			inputs[paramCounter++] = secondName;
		}
		if(email!=null){
			statement+=" email = ? ,";
			inputs[paramCounter++] = email;
		}
		if(notes!=null){
			statement+=" notes = ? ,";
			inputs[paramCounter++] = notes;
		}
		
		//strip the trailing ,
		statement=statement.substring(0, statement.length() - 1);
		statement+=" WHERE username = ?";
		inputs[paramCounter] = username;
		Logger.debug("DatabaseCommands updateUser()", "the update string is : "+statement);
		
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - updateUser()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}

	//********* Controller Management ***********
	public boolean addController(String controllerName, String notes, String controllerIP, String port,String board){
		String[] inputs = new String[5];
		inputs[0] = controllerName;
		inputs[1] = notes;
		inputs[2] = controllerIP;
		inputs[3] = port;
		inputs[4] = board;
		
		String statement = "INSERT INTO CONTROLLERS VALUES(NULL, ? , ? , ? , ? ,NULL ,NULL ,NULL, NULL ,NULL, ?)";
		
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - addController()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}
	
	public boolean updateController(String controllerID, String name, String notes,String ip, String port,String boardType, int count){
		if(count<=0){
			return false;
		}
		
		//know that there is at least one update here
		int paramCounter=0;
		String statement = "UPDATE CONTROLLERS SET";
				
		String[] inputs = new String[count+1];
		
		if(name!=null){
			statement+=" name = ? ,";
			inputs[paramCounter++] = name;
		}
		if(notes!=null){
			statement+=" notes = ? ,";
			inputs[paramCounter++] = notes;
		}
		if(ip!=null){
			statement+=" ip = ? ,";
			inputs[paramCounter++] = ip;
		}
		if(port!=null){
			statement+=" port = ? ,";
			inputs[paramCounter++] = port;
		}
		if(boardType!=null){
			statement+=" board = ? ,";
			inputs[paramCounter++] = boardType;
		}
		
		//strip the trailing ,
		statement=statement.substring(0, statement.length() - 1);
		statement+=" WHERE id = ?";
		inputs[paramCounter] = controllerID;
		Logger.debug("DatabaseCommands updateController()", "the update string is : "+statement);
		
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - updateController()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}
	
	public boolean removeController(String controllerID){
		String statement = "DELETE FROM CONTROLLERS WHERE id = ?";
		String[] inputs = new String[1];
		inputs[0] = controllerID;
		
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - removeController()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}
	
	//Currently returns ip and port and name and boardType (board)
	public ControllerData getRequiredControllerData(String controllerID){
		String statement = "SELECT ip,port,name,board FROM CONTROLLERS WHERE id= ? ";
		String[] inputs = new String[1];
		inputs[0] = controllerID;
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			if(rs.next()){
				String ip = rs.getString(1);
				String port = rs.getString(2);
				String name = rs.getString(3);
				String boardType= rs.getString(4);
				return new ControllerData(ip,port,name,boardType);
			}
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - getRequiredControllerData()","Exception: "+ex.getLocalizedMessage());
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - getRequiredControllerData() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
		return new ControllerData(null,null,null,null);
	}
	
	public boolean addFileToController(String controllerID, String filename, byte[] file,String username){
		String statement = "UPDATE CONTROLLERS SET filename = ? , username= ? , dateVerified=CURRENT_TIMESTAMP, dateProgrammed=CURRENT_TIMESTAMP, file = ? WHERE id="+controllerID;
		String[] inputs = new String[2];
		inputs[0] = filename;
		inputs[1] = username;
		try{
			_theBase.executePreparedFileInsertStatement(statement, inputs, file);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - addFileToController()","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}
	
	//returns the filename or "" if file doesnt exist. Returns null if an error
	public String getFileNameInController(String controllerID){
		String statement = "SELECT filename FROM CONTROLLERS WHERE id = ?";
		String[] inputs = new String[1];
		inputs[0] = controllerID;
		
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			if(rs.next()){
				String filename = rs.getString(1);
				Logger.debug("DataBaseCommands - getFileNameInController", "filename is:"+filename);
				//if filename is null or empty
				if(filename==null||filename.equals("")||filename.equals("NULL")||filename.equals("null")){
					return "";
				}
				return filename;
			}
			return null;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - getFileNameInController()","Exception: "+ex.getLocalizedMessage());
			return null;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - getFileNameInController() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}
	
	public boolean removeFileFromController(String controllerID){
		String statement = "UPDATE CONTROLLERS SET filename=NULL, file=NULL,username=NULL,dateProgrammed=NULL,dateVerified=NULL WHERE id = ?";
		String[] inputs = new String[1];
		inputs[0] = controllerID;
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
			return true;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - updateControllerTimestamp()","Unable to update controller timestamp: Exception: "+ex.getLocalizedMessage());
			return false;
		}
	}
	
	public void updateControllerVerifiedTimestamp(String controllerID){
		String statement = "UPDATE CONTROLLERS SET dateVerified=CURRENT_TIMESTAMP WHERE id = ?";
		String[] inputs = new String[1];
		inputs[0] = controllerID;
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - updateControllerTimestamp()","Unable to update controller timestamp: Exception: "+ex.getLocalizedMessage());
			return;
		}
	}
	
	public String showControllers(){
		String statement = "SELECT id,name,notes,ip,port,filename,username,dateProgrammed,dateVerified,board FROM CONTROLLERS";
		ControllerXml xml = new ControllerXml();
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, new String[0]);
			while(rs.next()){
				String id = rs.getString(1);
				String name = rs.getString(2);
				String notes = rs.getString(3);
				String ip = rs.getString(4);
				String port = rs.getString(5);
				String filename = rs.getString(6);
				String username = rs.getString(7);
				String dateProgrammed = rs.getString(8);
				String dateVerified = rs.getString(9);
				String board = rs.getString(10);
				
				String reserved = this.checkControllerReserved(id);
				xml.addController(id,name,notes,ip,port,filename,username,dateProgrammed,dateVerified,board,reserved);
			}
			return xml.getList();
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - showControllers()","Exception: "+ex.getLocalizedMessage());
			return null;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - showControllers() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}
	
	public String addBoard(String boardName, String description){
		String statement = "INSERT INTO CONTROLLER_BOARDS VALUES (NULL, ?,?)";
		String[] inputs = new String[2];
		inputs[0] = boardName;
		inputs[1] = description==null? "" : description; 
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
			return "Board_Added";
		}catch(SQLException ex){
			if(ex.getErrorCode()==1062){
				return "Already_Exists";
			}
			
			Logger.severe("DatabaseCommands - addBoard()","Exception: "+ex.getLocalizedMessage());
			
			return "Error_Adding";
		}
	}
	
	public String editBoard(String boardName,String description){
		String statement = "UPDATE CONTROLLER_BOARDS SET description = ? WHERE board= ?";
		String[] inputs = new String[2];
		inputs[0] = description==null? "" : description;
		inputs[1] = boardName; 
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
			return "Board_Updated";
		}catch(SQLException ex){
			if(ex.getErrorCode()==1062){
				return "Already_Exists";
			}
			Logger.severe("DatabaseCommands - editBoard()","Exception: "+ex.getLocalizedMessage());	
			return "Error_Updating";
		}
	}
	
	public boolean removeBoard(String boardName){
		String statement = "DELETE FROM CONTROLLER_BOARDS WHERE board=?";
		String[] inputs = new String[1];
		inputs[0]=boardName;
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
			return true;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - removeBoard()","Exception: "+ex.getLocalizedMessage());	
			return false;
		}
	}
	
	public String getBoards(){
		String statement = "SELECT board,description FROM CONTROLLER_BOARDS";
		BoardTypesXml xml = new BoardTypesXml();
		try{
			//starts at 1
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, new String[0]);
			while(rs.next()){
				String board = rs.getString(1);
				String desc = rs.getString(2);
				xml.addBoard(board, desc);
			}
			return xml.getList();
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - getBoards()","Exception: "+ex.getLocalizedMessage());
			return null;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - getBoards() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}
	
	//Returns null or the username of who the controller is reserved for
	public String checkControllerReserved(String controllerID){
		String secondStatment = "SELECT username FROM CONTROLLERS_RESERVE WHERE c_id = ?";
		String[] input = new String[1];
		input[0] = controllerID;
		String reserved=null;
		try{
			ResultSet rs2 = _theBase.executePreparedSelectStatement(secondStatment, input);
			if(rs2.next()){
				reserved = rs2.getString(1);
			}
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - checkControllerReserved()","Exception: "+ex.getLocalizedMessage());
		}
		return reserved;
	}
	
	public boolean addReservation(String controllerID, String username){
		String statement = "UPDATE CONTROLLERS_RESERVE SET username= ? WHERE c_id = ?";
		String[] inputs = new String[2];
		inputs[0] = username;
		inputs[1] = controllerID; 
		if(this.checkControllerReserved(controllerID)==null){
			statement= "INSERT INTO CONTROLLERS_RESERVE VALUES(?,?)";
			inputs[0] = controllerID;
			inputs[1] = username; 
		}
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
			return true;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - addReservation","Exception: "+ex.getLocalizedMessage());
			return false;
		}
	}
	
	public boolean removeReservation(String controllerID){
		String statement = "DELETE FROM CONTROLLERS_RESERVE WHERE c_id= ?";
		String[] inputs = new String[1];
		inputs[0] = controllerID;
		try{
			_theBase.executePreparedUpdateOrInsertStatement(statement, inputs);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - removeReservation","Exception: "+ex.getLocalizedMessage());
			return false;
		}
		return true;
	}
	
	public boolean checkControllerWithIDExists(String id){
		String statement = "SELECT EXISTS(SELECT id FROM CONTROLLERS WHERE id= ?)";
		String[] inputs = new String[1];
		inputs[0] = id;
		try{
			//returns a 1 or 0
			String result = "0";
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			if(rs.next()){
				result = rs.getString(1);
			}
			if(result.equals("1")){
				return true;
			}
			return false;
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - checkControllerWithIDExists()","Exception: "+ex.getLocalizedMessage());
			return false;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - checkControllerWithIDExists() final","Exception: "+ex.getLocalizedMessage());	
			}
		}
	}

	//Used in edit & add controller
	public boolean checkControllerAlreadyExists(String name, String ip, String port, boolean nameBeingUpdated, boolean onlyNameEdited){
		Logger.debug("DatabaseCommands - checkControllerAlreadyExists", "checking with name:"+name+" ip:"+ip+" port:"+port+" nameBeingUpdated?: "+nameBeingUpdated+" onlyNameEdited: "+onlyNameEdited);
		String statement;
		String[] inputs;
		
		if(nameBeingUpdated){
			statement = "SELECT EXISTS(select id from CONTROLLERS WHERE name= ?)";
			inputs = new String[1];
			inputs[0] = name;
	
			try{
				//returns a 1 or 0
				String result = "1";
				ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
				if(rs.next()){
					result = rs.getString(1);
				}
				if(result.equals("1")){
					return true;
				}
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - checkControllerAlreadyExists()","1. Exception: "+ex.getLocalizedMessage());
				return true;
			}finally{
				try{
					_theBase.closeDatabase();
				}catch(SQLException ex){
					Logger.severe("DatabaseCommands - checkControllerAlreadyExists() final","2. Exception: "+ex.getLocalizedMessage());	
				}
			}
		}
		//if name passes validation check and the port or ip has been updated, then check these(port & ip)
		if(!onlyNameEdited){
			statement = "SELECT EXISTS(select id from CONTROLLERS WHERE ip= ? AND port = ?)";
			inputs = new String[2];
			inputs[0] = ip;
			inputs[1] = port;
			
			try{
				//returns a 1 or 0
				String result = "1";
				ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
				if(rs.next()){
					result = rs.getString(1);
				}
				if(result.equals("1")){
					return true;
				}
				return false;
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - checkControllerAlreadyExists()","3. Exception: "+ex.getLocalizedMessage());
				return true;
			}finally{
				try{
					_theBase.closeDatabase();
				}catch(SQLException ex){
					Logger.severe("DatabaseCommands - checkControllerAlreadyExists() final","4. Exception: "+ex.getLocalizedMessage());	
				}
			}
		}
		return false;
	}
	
	//returns null on error/no file
	public FileDownloadData getFileFromControllerDatabase(String controllerID){
		String statement = "SELECT file,filename FROM CONTROLLERS WHERE ID=?";
		String[] inputs = new String[1];
		inputs[0] = controllerID;
		try{
			ResultSet rs = _theBase.executePreparedSelectStatement(statement, inputs);
			Blob file = null;
			String filename = "unknown";
			if(rs.next()){
				file = rs.getBlob(1);
				filename = rs.getString(2);
			}
			//if the file doesnt exist
			if(file == null || filename ==null || filename.length()<1){
				Logger.debug("DatabaseCommands - getFileFromControllerDatabase()","File doesnt exist");
				return null;
			}
			
			//get all the bytes from the first to the end
			//can be a problem for huge files (can use streams)
			byte[] fileAsBytes = file.getBytes(1, (int)file.length());
			return new FileDownloadData(fileAsBytes,filename);
		}catch(SQLException ex){
			Logger.severe("DatabaseCommands - getFileFromControllerDatabase()","Exception: "+ex.getLocalizedMessage());
			return null;
		}finally{
			try{
				_theBase.closeDatabase();
			}catch(SQLException ex){
				Logger.severe("DatabaseCommands - getFileFromControllerDatabase() final","Exception: "+ex.getLocalizedMessage());	
			}
		}	
	}
	
}